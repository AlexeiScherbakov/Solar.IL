<Project Sdk="Microsoft.NET.Sdk.IL">
	<PropertyGroup>
		<TargetFrameworks>net6.0;netcoreapp3.1;netstandard2.0;net48</TargetFrameworks>
		<DebugOptimization>IMPL</DebugOptimization>
		<DebugOptimization Condition="'$(Configuration)' == 'Release'">OPT</DebugOptimization>
		<CoreCompileDependsOn>$(CoreCompileDependsOn);GenerateVersionFile</CoreCompileDependsOn>
		<IlasmFlags>$(IlasmFlags) -DEBUG=$(DebugOptimization)</IlasmFlags>
		<IsPackable>true</IsPackable>
		<GeneratePackageOnBuild>True</GeneratePackageOnBuild>
		<ProduceReferenceAssembly>false</ProduceReferenceAssembly>
		<AssemblyVersion>1.0.0.0</AssemblyVersion>
		<FileVersion>1.0.0.0</FileVersion>
		<Version>1.0.0-beta.4</Version>
		<GenerateDocumentationFile>true</GenerateDocumentationFile>
		<DocumentationFile>$(MSBuildThisFileDirectory)Solar.IL.xml</DocumentationFile>
		<RepositoryUrl>https://github.com/AlexeiScherbakov/Solar.IL</RepositoryUrl>
		<Authors>Alexei Shcherbakov</Authors>
		<PackageLicenseExpression>MIT</PackageLicenseExpression>
		<Title>Solar.IL</Title>
		<Description>IL Assembly Library</Description>
		<PackageReadmeFile>README.md</PackageReadmeFile>
		<Copyright>Copyright © Alexei Shcherbakov 2021</Copyright>
	</PropertyGroup>
	<PropertyGroup Condition="$([MSBuild]::GetTargetFrameworkIdentifier('$(TargetFramework)')) == '.NETCoreApp'">
		<ExtraMacros>#define netcoreapp</ExtraMacros>
		<CoreAssembly>System.Runtime</CoreAssembly>
		<_FeaturePublicSign>true</_FeaturePublicSign>
	</PropertyGroup>
	<PropertyGroup Condition="$([MSBuild]::GetTargetFrameworkIdentifier('$(TargetFramework)')) == '.NETStandard'">
		<CoreAssembly>netstandard</CoreAssembly>
		<_FeaturePublicSign>true</_FeaturePublicSign>
	</PropertyGroup>
	<PropertyGroup Condition="$([MSBuild]::GetTargetFrameworkIdentifier('$(TargetFramework)')) == '.NETFramework'">
		<CoreAssembly>mscorlib</CoreAssembly>
		<_FeaturePublicSign>false</_FeaturePublicSign>
	</PropertyGroup>

	<PropertyGroup Condition="'$(TargetFramework)'=='net6.0'">
		<_FeatureUsePopCount>true</_FeatureUsePopCount>
	</PropertyGroup>
	<PropertyGroup Condition="'$(TargetFramework)'!='net6.0'">
		<_FeatureUsePopCount>false</_FeatureUsePopCount>
	</PropertyGroup>

	<PropertyGroup Condition="'$(_FeaturePublicSign)'=='true'">
		<AssemblyOriginatorKeyFile>..\solar_pub.snk</AssemblyOriginatorKeyFile>
		<PublicSign>True</PublicSign>
		<SignAssembly>true</SignAssembly>
	</PropertyGroup>

	<PropertyGroup Condition="'$(_FeaturePublicSign)'!='true'">
		<AssemblyOriginatorKeyFile>..\solar.snk</AssemblyOriginatorKeyFile>
		<DelaySign>false</DelaySign>
		<!--.NET Core ilasm not working for it https://github.com/dotnet/runtime/issues/12132-->
		<ILAsmToolPath>C:\Windows\Microsoft.NET\Framework\v4.0.30319\</ILAsmToolPath>
		<SignAssembly>true</SignAssembly>
	</PropertyGroup>

	<ItemGroup Condition="'$(_FeatureUsePopCount)'=='true'">
		<Compile Include="FlagEnumUtil.PopCount.msil"/>		
	</ItemGroup>
	<ItemGroup Condition="'$(_FeatureUsePopCount)'!='true'">
		<Compile Include="FlagEnumUtil.NoPopCount.msil"/>		
	</ItemGroup>
	
	<ItemGroup>
    	<None Include="README.md" Pack="true" PackagePath="\"/>
	</ItemGroup>

	<ItemGroup>
		<!-- mscorlib is passed in as an explicit reference from C# targets but not via the IL SDK. -->
		<Reference Include="$(CoreAssembly)"
				   Condition="'$(TargetFrameworkIdentifier)' != '.NETStandard'" />
	</ItemGroup>

	<Target Name="GenerateVersionFile"
			DependsOnTargets="GetAssemblyVersion;ResolveReferences"
			Inputs="$(MSBuildAllProjects)"
			Outputs="'$(VersionFilePath)">
		<PropertyGroup>
			<IncludePath>$([MSBuild]::NormalizeDirectory('$(IntermediateOutputPath)', 'version'))</IncludePath>
			<IncludePathTrimmed>$(IncludePath.TrimEnd('\'))</IncludePathTrimmed>
			<IlasmFlags>$(IlasmFlags) -INCLUDE="$(IncludePathTrimmed)"</IlasmFlags>
			<VersionFilePath Condition="'$(VersionFilePath)' == ''">$([MSBuild]::NormalizePath('$(IncludePath)', 'version.h'))</VersionFilePath>
			<_AssemblyVersion>$(AssemblyVersion.Replace('.', ':'))</_AssemblyVersion>
			<_coreAssemblyName Condition="'%(ReferencePath.FileName)' == '$(CoreAssembly)'">%(ReferencePath.FusionName)</_coreAssemblyName>
			<_assemblyNamePattern><![CDATA[[^,]+, Version=(?<v1>[0-9]+)\.(?<v2>[0-9]+)\.(?<v3>[0-9]+)\.(?<v4>[0-9]+), .*PublicKeyToken=(?<p1>[0-9a-f]{2})(?<p2>[0-9a-f]{2})(?<p3>[0-9a-f]{2})(?<p4>[0-9a-f]{2})(?<p5>[0-9a-f]{2})(?<p6>[0-9a-f]{2})(?<p7>[0-9a-f]{2})(?<p8>[0-9a-f]{2})]]></_assemblyNamePattern>
			<_coreAssemblyVersion>
				$([System.Text.RegularExpressions.Regex]::Replace(
				$(_coreAssemblyName),
				$(_assemblyNamePattern),
				'${v1}:${v2}:${v3}:${v4}'))
			</_coreAssemblyVersion>
			<_coreAssemblyVersionTrimmed>$(_coreAssemblyVersion.Trim())</_coreAssemblyVersionTrimmed>
			<_coreAssemblyPublicKeyToken>
				$([System.Text.RegularExpressions.Regex]::Replace(
				$(_coreAssemblyName),
				$(_assemblyNamePattern),
				'${p1} ${p2} ${p3} ${p4} ${p5} ${p6} ${p7} ${p8}').ToUpperInvariant())
			</_coreAssemblyPublicKeyToken>
			<_VersionFileContents>
				<![CDATA[
#define CORE_ASSEMBLY "$(CoreAssembly)"
#define ASSEMBLY_VERSION "$(_AssemblyVersion)"
#define CORE_ASSEMBLY_VERSION "$(_coreAssemblyVersionTrimmed)"
#define FILE_VERSION "{string('$(FileVersion)')}"
#define INFORMATIONAL_VERSION "{string('$(InformationalVersion)')}"
$(ExtraMacros)
// Metadata version: v4.0.30319
.assembly extern CORE_ASSEMBLY
{
  .publickeytoken = ($(_coreAssemblyPublicKeyToken) )
  .ver CORE_ASSEMBLY_VERSION
}
 ]]>
			</_VersionFileContents>
		</PropertyGroup>

		<Message Importance="high" Text="Building:$(TargetFramework) $([MSBuild]::GetTargetFrameworkIdentifier('$(TargetFramework)')) CoreAssembly $(CoreAssembly)#$(_coreAssemblyVersionTrimmed) PublicSign=$(_FeaturePublicSign) PopCount=$(_FeatureUsePopCount)"/>

		<WriteLinesToFile
		  File="$(VersionFilePath)"
		  Lines="$(_VersionFileContents)"
		  Overwrite="true"
		  WriteOnlyWhenDifferent="true" />

		<ItemGroup>
			<FileWrites Include="$(VersionFilePath)" />
		</ItemGroup>
	</Target>

	<!-- Decompile the ILResourceReference to get native resources. -->
	<Target Name="SetILResourceReference"
			BeforeTargets="DisassembleIlasmResourceFile"
			Condition="'@(ResolvedMatchingContract)' != ''">
		<ItemGroup>
			<ILResourceReference Include="@(ResolvedMatchingContract)" />
		</ItemGroup>
	</Target>
</Project>
